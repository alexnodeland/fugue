use rand::Rng;
use crate::core::address::Address; use crate::core::distribution::Normal; use crate::runtime::handler::Handler; use crate::runtime::trace::{Trace, ChoiceF64};
pub struct PriorHandler<'r, R: Rng + ?Sized>{ pub rng:&'r mut R, pub trace: Trace }
impl<'r,R: Rng + ?Sized> Handler for PriorHandler<'r,R>{ fn on_sample(&mut self, addr:&Address, dist:&Normal)->f64{ let x=dist.sample(self.rng); let lp=dist.log_prob(x); self.trace.log_prior+=lp; self.trace.choices.insert(addr.clone(), ChoiceF64{addr:addr.clone(), value:x, logp:lp}); x } fn on_observe(&mut self,_:&Address, dist:&Normal, value:f64){ self.trace.log_likelihood += dist.log_prob(value); } fn on_factor(&mut self, logw:f64){ self.trace.log_factors += logw; } fn finish(self)->Trace{ self.trace } }
pub struct ReplayHandler<'r, R: Rng + ?Sized>{ pub rng:&'r mut R, pub base:Trace, pub trace: Trace }
impl<'r,R: Rng + ?Sized> Handler for ReplayHandler<'r,R>{ fn on_sample(&mut self, addr:&Address, dist:&Normal)->f64{ let x = if let Some(c)=self.base.choices.get(addr){ c.value } else { dist.sample(self.rng) }; let lp=dist.log_prob(x); self.trace.log_prior+=lp; self.trace.choices.insert(addr.clone(), ChoiceF64{addr:addr.clone(), value:x, logp:lp}); x } fn on_observe(&mut self,_:&Address, dist:&Normal, value:f64){ self.trace.log_likelihood += dist.log_prob(value);} fn on_factor(&mut self, logw:f64){ self.trace.log_factors += logw;} fn finish(self)->Trace{ self.trace } }
pub struct ScoreGivenTrace{ pub base:Trace, pub trace:Trace }
impl Handler for ScoreGivenTrace{ fn on_sample(&mut self, addr:&Address, dist:&Normal)->f64{ let c=self.base.choices.get(addr).unwrap_or_else(|| panic!("missing value for site {} in base trace", addr)); let lp=dist.log_prob(c.value); self.trace.log_prior += lp; self.trace.choices.insert(addr.clone(), c.clone()); c.value } fn on_observe(&mut self,_:&Address, dist:&Normal, value:f64){ self.trace.log_likelihood += dist.log_prob(value);} fn on_factor(&mut self, logw:f64){ self.trace.log_factors += logw;} fn finish(self)->Trace{ self.trace } }
